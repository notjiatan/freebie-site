---
// Optimized Starfield Background - Lightweight for all devices
---

<div class="ring ring-left"></div>
<div class="ring ring-right"></div>
<canvas id="starfield"></canvas>

<style>
  body {
    background: linear-gradient(to bottom, #090a0f 0%, #1b2735 70%, #090a0f 100%) !important;
    min-height: 100vh;
    overflow-x: hidden;
  }

  #starfield {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    pointer-events: none;
  }

  .ring {
    position: fixed;
    width: 4px;
    height: 150px;
    background: #FF00FF;
    border: none;
    outline: none !important;
    box-shadow: none !important;
    filter: drop-shadow(0 0 10px #FF00FF) drop-shadow(0 0 30px #FF00FF) drop-shadow(0 0 50px #FF00FF);
    animation: flyUp 20s linear infinite;
    z-index: -1;
    will-change: transform;
  }

  @keyframes flyUp {
    from { transform: translateY(100vh); }
    to { transform: translateY(-100vh); }
  }

  .ring::before {
    content: "üçîüÜì";
    position: absolute;
    top: -30px;
    left: -20px;
    color: #FF00FF;
    font-size: 2em;
  }

  .ring-left {
    left: 50px;
  }

  .ring-right {
    right: 50px;
    background: #FF70FF;
    filter: drop-shadow(0 0 10px #FF70FF) drop-shadow(0 0 30px #FF70FF) drop-shadow(0 0 50px #FF70FF);
    animation-delay: -10s;
  }

  .ring-right::before {
    content: "üçü";
    color: #FF70FF;
  }

  /* Reduce motion for accessibility and performance */
  @media (prefers-reduced-motion: reduce) {
    .ring {
      animation: none;
      opacity: 0.3;
    }
  }
</style>

<script>
  // Optimized starfield using canvas - much more performant than box-shadow
  const canvas = document.getElementById('starfield') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d', { alpha: true });

  if (!ctx) throw new Error('Canvas not supported');

  // Responsive sizing
  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  resizeCanvas();
  window.addEventListener('resize', resizeCanvas);

  // Star configuration - reduced count for performance
  interface Star {
    x: number;
    y: number;
    radius: number;
    speed: number;
    opacity: number;
  }

  const stars: Star[] = [];
  const STAR_COUNT = window.innerWidth < 768 ? 50 : 100; // Fewer stars on mobile

  // Initialize stars with different sizes and speeds
  for (let i = 0; i < STAR_COUNT; i++) {
    stars.push({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      radius: Math.random() < 0.7 ? 1 : Math.random() < 0.9 ? 1.5 : 2,
      speed: 0.05 + Math.random() * 0.15,
      opacity: 0.3 + Math.random() * 0.7
    });
  }

  // Efficient animation loop using requestAnimationFrame
  let lastTime = 0;
  function animate(currentTime: number) {
    const deltaTime = currentTime - lastTime;

    // Throttle to ~30fps for better performance (only update every ~33ms)
    if (deltaTime < 33) {
      requestAnimationFrame(animate);
      return;
    }

    lastTime = currentTime;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw and update stars
    stars.forEach(star => {
      // Draw star
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;
      ctx.fill();

      // Move star down
      star.y += star.speed;

      // Reset star to top when it goes off screen
      if (star.y > canvas.height + 10) {
        star.y = -10;
        star.x = Math.random() * canvas.width;
      }
    });

    requestAnimationFrame(animate);
  }

  // Start animation
  requestAnimationFrame(animate);

  // Pause animation when tab is not visible (saves CPU)
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      // Animation will naturally pause when RAF stops being called
    } else {
      lastTime = performance.now();
      requestAnimationFrame(animate);
    }
  });
</script>
